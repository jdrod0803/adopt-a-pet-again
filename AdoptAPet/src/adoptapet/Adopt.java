/**
 *
 * Title:           Queues for Adopt-A-Pet
 * Semester:        COP3804 â€“ Spring 2019
 *
 * @author 6114243(Do NOT Use Your First or Last Name) Instructor: C. Charters
 *
 * Due Date: 04/10/19
 *
 * Introduction to lists, queues, and priority queues. Used Java Swing for the
 * extra credit, as well as to avoid having to be limited to console.
 */
package adoptapet;

import java.awt.Color;

/**
 *
 * @author juandiego
 */
public class Adopt extends javax.swing.JFrame {

    QHandler handler = new QHandler();
    Color myGreen = new Color(17, 124, 49);

    /**
     * Creates new form Form
     */
    public Adopt() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        txtSurrenderName = new javax.swing.JTextField();
        comboBoxSpeciesSurrender = new javax.swing.JComboBox<>();
        txtDob = new javax.swing.JTextField();
        surrenderSubmit = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        comboBoxSpeciesAdopt = new javax.swing.JComboBox<>();
        txtAdoptName = new javax.swing.JTextField();
        chkEldest = new javax.swing.JCheckBox();
        adoptSubmit = new javax.swing.JButton();
        lblData = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Adoption Manager");
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Adoption Center"));

        jLabel1.setText("Welcome to the Adoption Center. Use this interface to adopt or surrender an animal. ");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Surrender"));

        txtSurrenderName.setText("Name");
        txtSurrenderName.setToolTipText("Name of Pet");

        comboBoxSpeciesSurrender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Cat", "Dog" }));

        txtDob.setText("Date of Birth (yyyymmdd)");

        surrenderSubmit.setText("Surrender");
        surrenderSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                surrenderSubmitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(txtSurrenderName, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(comboBoxSpeciesSurrender, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(txtDob, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(surrenderSubmit)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSurrenderName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxSpeciesSurrender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDob, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(surrenderSubmit))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Adopt"));

        comboBoxSpeciesAdopt.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Cat", "Dog" }));

        txtAdoptName.setEditable(false);
        txtAdoptName.setText("Name will be displayed on Adoption");

        chkEldest.setText("Eldest Available");

        adoptSubmit.setText("Adopt");
        adoptSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adoptSubmitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(txtAdoptName, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(comboBoxSpeciesAdopt, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(chkEldest)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(adoptSubmit)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBoxSpeciesAdopt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtAdoptName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkEldest)
                    .addComponent(adoptSubmit))
                .addGap(0, 15, Short.MAX_VALUE))
        );

        lblData.setText("Enter pet info and submit.");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblData)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Performs the action when surrendering an animal.
     *
     * @param evt ActionEvent
     */
    private void surrenderSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_surrenderSubmitActionPerformed
        try {
            /*
            GETTING OUR DATA
             */
            String name = txtSurrenderName.getText();
            int dob = Integer.parseInt(txtDob.getText());
            String species = (String) comboBoxSpeciesSurrender.getSelectedItem();

            /*
            VALIDATION
             */
            if (species.equals("Select")) {
                throw new IllegalArgumentException();
            }
            //Validate the name
            if (name.equals("Name")) {
                statusPrint(Color.red, "! Please enter a valid name.");
                return;
            }
            /*
            SUCCESS
             */
            statusPrint(myGreen, "You have surrendered " + name + ".");
            if (species.equals("Cat")) {
                enqueueCat(new Pet(name, dob, species));
            } else if (species.equals("Dog")) {
                enqueueDog(new Pet(name, dob, species));
            }
            enqueueAnmial(new Pet(name, dob, species));

        } catch (NumberFormatException nfe) {
            statusPrint(Color.red, "! Please ensure you have entered the date in the correct format (yyyymmdd).");
        } catch (IllegalArgumentException iae) {
            statusPrint(Color.red, "! Please ensure you have selected a species.");
        }
    }//GEN-LAST:event_surrenderSubmitActionPerformed
    /**
     * Performs the action when adopting an animal.
     *
     * @param evt ActionEvent
     */
    private void adoptSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adoptSubmitActionPerformed
        /*
        GET OUR DATA
         */
        String species = (String) comboBoxSpeciesAdopt.getSelectedItem();
        boolean wantsEldest = chkEldest.isSelected();
        //Validate entry
        if (species.equals("Select")) {
            statusPrint(Color.red, "! Please ensure you have selected a species.");
            return;
        }

        //If it's a cat.
        if (species.equals("Cat") && !isCatEmpty() && wantsEldest) {
            Pet cat = dequeueAnimal();
            statusPrint(myGreen, "You have adopted " + cat.getName() + "! Thank you!");
        } else if (species.equals("Cat") && !isCatEmpty()) {
            Pet cat = dequeueCat();
            statusPrint(myGreen, "You have adopted " + cat.getName() + "! Thank you!");
        } else if (species.equals("Cat") && isCatEmpty()) {
            statusPrint(Color.red, "! There are no available cats.");
        }
        //If it's a dog.
        if (species.equals("Dog") && !isDogEmpty() && wantsEldest) {
            Pet dog = dequeueAnimal();
            statusPrint(myGreen, "You have adopted " + dog.getName() + "! Thank you!");
        } else if (species.equals("Dog") && !isDogEmpty()) {
            Pet dog = dequeueDog();
            statusPrint(myGreen, "You have adopted " + dog.getName() + "! Thank you!");
        } else if (species.equals("Dog") && isDogEmpty()) {
            statusPrint(Color.red, "! There are no available dogs.");
        }
    }//GEN-LAST:event_adoptSubmitActionPerformed
    /**
     * Checks if cat queue is empty.
     *
     * @return true if cat queue is empty
     */
    public boolean isCatEmpty() {
        if (handler.getCatQ().isEmpty()) {
            return true;
        }
        return false;
    }

    /**
     * Checks if dog queue is empty.
     *
     * @return true if dog queue is empty.
     */
    public boolean isDogEmpty() {
        if (handler.getDogQ().isEmpty()) {
            return true;
        }
        return false;
    }

    /**
     * Queue a cat
     *
     * @param cat to be queued.
     */
    public void enqueueCat(Pet cat) {
        handler.getCatQ().add(cat);
    }

    /**
     * Queue a dog.
     *
     * @param dog to be queued.
     */
    public void enqueueDog(Pet dog) {
        handler.getDogQ().add(dog);
    }

    /**
     * Dequeue a cat.
     *
     * @return Pet that was dequeued
     */
    public Pet dequeueCat() {
        return handler.getCatQ().remove();
    }

    /**
     * Dequeue a dog.
     *
     * @return Pet that was dequeued
     */
    public Pet dequeueDog() {
        return handler.getDogQ().remove();
    }

    /**
     * Queue a pet.
     *
     * @param pet to be queued
     */
    public void enqueueAnmial(Pet pet) {
        handler.getPriorityQ().add(pet);
    }

    /**
     * Will dequeue an animal based on age and call another method to remove it
     * from the species queue.
     *
     * @return pet that was removed.
     */
    public Pet dequeueAnimal() {
        Pet pet = handler.getPriorityQ().remove();
        if (pet.getSpecies().equals("Cat")) {
            handler.takeSpecificPet(pet, handler.getCatQ());
        } else if (pet.getSpecies().equals("Dog")) {
            handler.takeSpecificPet(pet, handler.getDogQ());
        }
        return pet;
    }

    /**
     * Prints status message to form
     *
     * @param color Color
     * @param message Message to print.
     */
    public void statusPrint(Color color, String message) {
        lblData.setForeground(color);
        lblData.setText(message);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Adopt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Adopt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Adopt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Adopt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Adopt().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton adoptSubmit;
    private javax.swing.JCheckBox chkEldest;
    private javax.swing.JComboBox<String> comboBoxSpeciesAdopt;
    private javax.swing.JComboBox<String> comboBoxSpeciesSurrender;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel lblData;
    private javax.swing.JButton surrenderSubmit;
    private javax.swing.JTextField txtAdoptName;
    private javax.swing.JTextField txtDob;
    private javax.swing.JTextField txtSurrenderName;
    // End of variables declaration//GEN-END:variables
}
